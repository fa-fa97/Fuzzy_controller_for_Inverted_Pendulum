FUNCTION_BLOCK Inverted_Pendulum

    VAR_INPUT
        theta : REAL; (* min=0, max=360 *)
        theta_dot : REAL; (* min=-600, max=600 *)
        theta_dot_dot : REAL;
        x : REAL; (* min=-20, max=20 *)
        x_dot : REAL; (* min=-10, max=10 *)
        x_dot_dot : REAL;
	(* other vars if needed *)
    END_VAR

    VAR_OUTPUT
        F : REAL;
        
    END_VAR

    FUZZIFY theta
        TERM n := (-1, 1) (-1, 1) (-0.5, 0);
        TERM nm := (-1, 0) (-0.5, 1) (0, 0);
        TERM z := (-0.5, 0) (0, 1) (0.5, 0);
        TERM pm := (0, 0) (0.5, 1) (1, 0);
        TERM pb := (0.5, 0) (1, 1) (1, 1);    
    END_FUZZIFY
    
    FUZZIFY theta_dot
        TERM n := (-10, 1) (-1, 1) (-0.5, 0);
        TERM nm := (-1, 0) (-0.5, 1) (0, 0);
        TERM z := (-0.5, 0) (0, 1) (0.5, 0);
        TERM pm := (0, 0) (0.5, 1) (1, 0);
        TERM pb := (0.5, 0) (1, 1) (10, 1);
    END_FUZZIFY

    DEFUZZIFY F
        TERM n := (-1.0, 1) (-0.6, 0)
        TERM nm := (-1.0, 0) (-0.6, 1) (-0.2, 0)
        TERM ns := (-0.6, 0) (-0.2, 1) (0, 0)
        TERM z := (-0.1, 0) (0, 1) (0.1, 0)
        TERM ps := (0, 0) (0.2, 1) (0.6, 0)
        TERM pm := (0.2, 0) (0.6, 1) (1, 0)
        TERM pb := (0.6, 0) (1, 1)
    
        ACCU : MAX; 
        METHOD : COG;
        DEFAULT := 0;

    END_DEFUZZIFY

    RULEBLOCK Inverted_Pendulum
        AND : AlgebraicProduct;
        OR : MAX;
        
        RULE 1 : IF theta IS pm AND theta_dot IS pm THEN F IS pm;
        RULE 2 : IF theta IS pm AND theta_dot IS z THEN F IS ps;
        RULE 3 : IF theta IS pm AND theta_dot IS nm THEN F IS z;
        RULE 4: IF theta IS z AND theta_dot IS pm THEN F IS ps;
        RULE 5: IF theta IS nm AND theta_dot IS pm THEN F IS z;
        RULE 6: IF theta IS nm AND theta_dot IS nm THEN F IS nm;
        RULE 7: IF theta IS nm AND theta_dot IS z THEN F IS ns;
        RULE 8: IF theta IS z AND theta_dot IS nm THEN F IS ns;
    END_RULEBLOCK

END_FUNCTION_BLOCK
